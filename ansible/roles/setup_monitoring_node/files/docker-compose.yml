---
version: "3.4"

# Mimir Deployment Mode Read-Write: https://grafana.com/docs/mimir/latest/references/architecture/deployment-modes/#read-write-mode
# Loki Deployment Mode Read-Write: https://grafana.com/docs/loki/latest/get-started/deployment-modes/#simple-scalable
# Tempo Deployment Mode Distributed: https://grafana.com/docs/tempo/latest/operations/architecture/
# Tempo Jaeger tracing by setting enviornment variables: 
#   https://github.com/jaegertracing/jaeger-client-go#environment-variables
#   https://grafana.com/docs/tempo/latest/operations/monitor/?pg=traces&plcmt=options#traces
#
# cadvisor basic setup: https://blog.devops.dev/real-time-docker-container-monitoring-with-prometheus-and-grafana-498078334a99
#     And also make sure to deal with cgroup v2 issue adding 'cgroup_enable=cpuset cgroup_memory=1 cgroup_enable=memory' to /boot/cmdline.txt
#

volumes:
  grafana-data:
    driver: local
  #prometheus-data:
  #  driver: local
  minio-data:
    driver: local
  loki-data:
    driver: local
  mimir-data:
    driver: local
  ngnix-config:
    driver: local

networks:
  monitoring:
    driver: bridge

services:
  # Since the Loki containers are running as user 10001 and the mounted data volume is owned by root,
  # Loki would not have permissions to create the directories.
  # Therefore the init container changes permissions of the mounted directory.
  init:
    image: &lokiImage grafana/loki:latest
    user: root
    entrypoint:
    - "chown"
    - "10001:10001"
    - "/loki"
    volumes:
      - loki-data:/loki
    networks:
      - monitoring
  
  init2:
    image: &mimirImage grafana/mimir:latest
    user: root
    entrypoint:
    - "chown"
    - "10001:10001"
    - "/mimir"
    volumes:
      - mimir-data:/mimir
    networks:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    depends_on:
      - gateway
    #environment:
    #  GF_AUTH_ANONYMOUS_ENABLED: "true"
    #  GF_AUTH_DISABLE_LOGIN_FORM: "true"
    #  GF_AUTH_ANONYMOUS_ORG_ROLE: "Admin"
    volumes:
      #- ./config/grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml
      - grafana-data:/var/lib/grafana
      # Later I will provide data sources in the datasource.yml file (also the Prometheus datasource)
      # And I also provide the dashboard IDs for the standard monitoring and log dasboard
    networks:
      - monitoring
    ports:
      - 3000:3000

  # Object store for metrics, logs and traces
  minio:
    image: minio/minio:latest
    # In case you have to build the image for ARMv7
    #build: ./Dockerfile.armhf
    #image: minio-arm
    container_name: minio
    restart: unless-stopped
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /data/loki-data && \
        mkdir -p /data/loki-ruler && \
        mkdir -p /data/mimir-blocks && \
        mkdir -p /data/mimir-ruler && \
        mkdir -p /data/mimir-alertmanager && \
        mkdir -p /data/tempo-data && \
        minio server --address "0.0.0.0:9000" --console-address "0.0.0.0:9001" /data
    environment:
      - MINIO_ROOT_USER=loki
      - MINIO_ROOT_PASSWORD=supersecret
      - MINIO_PROMETHEUS_AUTH_TYPE=public
      - MINIO_UPDATE=off
    volumes:
      - minio-data:/data
    networks:
      - monitoring
    ports:
      - 9000:9000
      - 9001:9001

  # Loki in read-write mode
  loki-backend:
    image: *lokiImage
    container_name: loki-backend
    restart: unless-stopped
    # For Docker Swarm deployments
    #deploy:
    #  mode: replicated
    #  replicas: 3
    depends_on:
      - minio
    command: "-config.file=/etc/loki/loki-config.yml -target=backend -legacy-read-mode=false"
    volumes:
      - ./config/loki-config.yml:/etc/loki/loki-config.yml
      #- ./rules:/loki/rules:ro
    networks:
      - monitoring
    ports:
      #- 3102:3100
      - 3100
      - 7946
      - 9095

  # Log aggregation read path
  loki-read:
    image: *lokiImage
    container_name: loki-read
    restart: unless-stopped
    # For Docker Swarm deployments
    #deploy:
    #  mode: replicated
    #  replicas: 3
    depends_on:
      - minio
    command: "-config.file=/etc/loki/loki-config.yml -target=read -legacy-read-mode=false"
    volumes:
      - ./config/loki-config.yml:/etc/loki/loki-config.yml
    networks:
      - monitoring
    ports:
      #- 3101:3100
      - 3100
      - 7946
      - 9095

  # Log aggregation write path
  loki-write:
    image: *lokiImage
    container_name: loki-write
    restart: unless-stopped
    # For Docker Swarm deployments
    #deploy:
    #  mode: replicated
    #  replicas: 3
    depends_on:
      - minio
    command: "-config.file=/etc/loki/loki-config.yml -target=write"
    volumes:
      - ./config/loki-config.yml:/etc/loki/loki-config.yml
    networks:
      - monitoring
    ports:
      #- 3102:3100
      - 3100
      - 7946
      - 9095

  # Mimir in read-write mode
  mimir-backend:
    image: *mimirImage
    container_name: mimir-backend
    restart: unless-stopped
    # For Docker Swarm deployments
    #deploy:
    #  mode: replicated
    #  replicas: 3
    depends_on:
      - minio
    command: "-config.file=/etc/mimir/mimir-config.yml -target=backend"
    volumes:
      - ./config/mimir-config.yml:/etc/mimir/mimir-config.yml
    networks:
      - monitoring
    ports:
      #- 8003
      - 3200
      - 7946
  
  mimir-read:
    image: *mimirImage
    container_name: mimir-read
    restart: unless-stopped
    # For Docker Swarm deployments
    #deploy:
    #  mode: replicated
    #  replicas: 3
    depends_on:
      - minio
    command: "-config.file=/etc/mimir/mimir-config.yml -target=read"
    volumes:
      - ./config/mimir-config.yml:/etc/mimir/mimir-config.yml
    networks:
      - monitoring
    ports:
      #- 8001
      - 3200
      - 7946

  mimir-write:
    image: *mimirImage
    container_name: mimir-write
    restart: unless-stopped
    # For Docker Swarm deployments
    #deploy:
    #  mode: replicated
    #  replicas: 3
    depends_on:
      - minio
    command: "-config.file=/etc/mimir/mimir-config.yml -target=write"
    volumes:
      - ./config/mimir-config.yml:/etc/mimir/mimir-config.yml
    networks:
      - monitoring
    ports:
      #- 8002
      - 3200
      - 7946

  # Tempo in distributed mode
  tempo-distributor:
    image: grafana/tempo:latest
    container_name: tempo-distributor
    restart: unless-stopped
    depends_on:
      - minio
    # Uncomment the following lines to enable tracing
    environment:
      - JAEGER_AGENT_HOST=grafana-agent
      - JAEGER_AGENT_PORT=6831       # Default port is 6831
    #  - JAEGER_ENDPOINT=             # If specified, the agent host/port are ignored
      - JAEGER_SAMPLER_TYPE=const
      - JAEGER_SAMPLER_PARAM=1
    command: "-config.file=/etc/tempo/tempo-config.yml -target=distributor"
    volumes:
      - ./config/tempo-config.yml:/etc/tempo/tempo-config.yml
    networks:
      - monitoring
    ports:
      - 3200  # tempo
      - 7946  # tempo memberlist
      - 9095  # tempo grpc
      - 4317  # otlp grpc
      - 4318  # otlp http
      - 14250 # Jaeger grpc ingest
      - 6832  # Jaeger thrift binary ingest
      - 6831  # Jaeger thrift compact ingest
      - 14268 # Jaeger thrift_http ingest
      #- 9411  # zipkin 

  tempo-ingester:
    image: grafana/tempo:latest
    container_name: tempo-ingester
    restart: unless-stopped
    depends_on:
      - minio
    # Uncomment the following lines to enable tracing
    environment:
      - JAEGER_AGENT_HOST=grafana-agent
      - JAEGER_AGENT_PORT=6831       # Default port is 6831
    #  - JAEGER_ENDPOINT=             # If specified, the agent host/port are ignored
      - JAEGER_SAMPLER_TYPE=const
      - JAEGER_SAMPLER_PARAM=1
    command: "-config.file=/etc/tempo/tempo-config.yml -target=ingester"
    volumes:
      - ./config/tempo-config.yml:/etc/tempo/tempo-config.yml
    networks:
      - monitoring
    ports:
      - 3200
      - 7946
      - 9095

  tempo-querier:
    image: grafana/tempo:latest
    container_name: tempo-querier
    restart: unless-stopped
    depends_on:
      - minio
    # Uncomment the following lines to enable tracing
    environment:
      - JAEGER_AGENT_HOST=grafana-agent
      - JAEGER_AGENT_PORT=6831       # Default port is 6831
    #  - JAEGER_ENDPOINT=             # If specified, the agent host/port are ignored
      - JAEGER_SAMPLER_TYPE=const
      - JAEGER_SAMPLER_PARAM=1
    command: "-config.file=/etc/tempo/tempo-config.yml -target=querier"
    volumes:
      - ./config/tempo-config.yml:/etc/tempo/tempo-config.yml
    networks:
      - monitoring
    ports:
      - 3200
      - 7946
      - 9095

  tempo-query-frontend:
    image: grafana/tempo:latest
    container_name: tempo-query-frontend
    restart: unless-stopped
    depends_on:
      - minio
    # Uncomment the following lines to enable tracing
    environment:
      - JAEGER_AGENT_HOST=grafana-agent
      - JAEGER_AGENT_PORT=6831       # Default port is 6831
    #  - JAEGER_ENDPOINT=             # If specified, the agent host/port are ignored
      - JAEGER_SAMPLER_TYPE=const
      - JAEGER_SAMPLER_PARAM=1
    command: "-config.file=/etc/tempo/tempo-config.yml -target=query-frontend"
    volumes:
      - ./config/tempo-config.yml:/etc/tempo/tempo-config.yml
    networks:
      - monitoring
    ports:
      - 3200
      - 7946
      - 9095
  
  tempo-compactor:
    image: grafana/tempo:latest
    container_name: tempo-compactor
    restart: unless-stopped
    depends_on:
      - minio
    # Uncomment the following lines to enable tracing
    environment:
      - JAEGER_AGENT_HOST=grafana-agent
      - JAEGER_AGENT_PORT=6831       # Default port is 6831
    #  - JAEGER_ENDPOINT=             # If specified, the agent host/port are ignored
      - JAEGER_SAMPLER_TYPE=const
      - JAEGER_SAMPLER_PARAM=1
    command: "-config.file=/etc/tempo/tempo-config.yml -target=compactor"
    volumes:
      - ./config/tempo-config.yml:/etc/tempo/tempo-config.yml
    networks:
      - monitoring
    ports:
      - 3200
      - 7946
      - 9095

  tempo-metrics-generator:
    image: grafana/tempo:latest
    container_name: tempo-metrics-generator
    restart: unless-stopped
    depends_on:
      - minio
    # Uncomment the following lines to enable tracing
    environment:
      - JAEGER_AGENT_HOST=grafana-agent
      - JAEGER_AGENT_PORT=6831       # Default port is 6831
    #  - JAEGER_ENDPOINT=             # If specified, the agent host/port are ignored
      - JAEGER_SAMPLER_TYPE=const
      - JAEGER_SAMPLER_PARAM=1
    command: "-config.file=/etc/tempo/tempo-config.yml -target=metrics-generator"
    volumes:
      - ./config/tempo-config.yml:/etc/tempo/tempo-config.yml
    networks:
      - monitoring
    ports:
      - 3200
      - 7946
      - 9095

  # Gateway for Mimir, Loki and Tempo
  gateway:
    image: nginx:latest
    container_name: gateway
    restart: unless-stopped
    depends_on:
      - loki-read
      - loki-write
    volumes:
      # Mount ngnix.conf file to the container to the default path for ngnix
      - ./config/nginx.conf:/etc/nginx/nginx.conf
    networks:
      - monitoring
    ports:
      - 8080:80
      - 3100
      #- 9090
      - 3200

  promtail:
    image: grafana/promtail:latest
    container_name: promtail
    restart: unless-stopped
    depends_on:
      - gateway
    command: "-config.file=/etc/promtail/promtail-config.yml"
    volumes:
      - ./config/promtail-config.yml:/etc/promtail/promtail-config.yml
      # Syslog of host machine
      - /var/log:/var/log      
      # Docker logs of containers
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock    
    networks:
      - monitoring
    ports:
      - 9080
  
  grafana-agent:
    image: grafana/agent:latest
    container_name: grafana-agent
    restart: unless-stopped
    depends_on:
      - gateway
    pid: "host"
    cap_add:
      - SYS_TIME
    command: "-config.file=/etc/agent/grafana-agent-config.yml"
    volumes:
      - ./config/grafana-agent-config.yml:/etc/agent/grafana-agent-config.yml
      - /:/host/root:ro,rslave
      - /var/run:/host/var/run:ro,rslave
      - /sys:/host/sys:ro,rslave
      - /var/lib/docker/:/var/lib/docker:ro,rslave
      - /dev/disk/:/dev/disk:ro,rslave
      - /proc:/host/proc:ro,rslave
      - /tmp/agent:/etc/agent
    networks:
      - monitoring
    ports:
      #- 80
      #- 4317  # otlp grpc
      #- 4318  # otlp http
      - 6831  # jaeger thrift compact
      #- 6832  # jaeger thrift binary
      #- 14250 # jaeger grpc
      #- 14268 # jaeger thrift_http
      #- 9411  # zipkin 

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.49.1
    container_name: cadvisor
    restart: unless-stopped
    depends_on:
      - gateway
    pid: "host"     # Needs to be set to "host" to get correct metrics
    privileged: true
    devices:
      - "/dev/kmsg"
    # Check for cadvisor runtime options here: https://github.com/google/cadvisor/blob/master/docs/runtime_options.md
    # Other options used: "--enable_load_reader=false"
    command: ["--disable_metrics=referenced_memory", "--enable_metrics=advtcp,app,cpu,cpuLoad,cpu_topology,cpuset,disk,diskIO,hugetlb,memory,memory_numa,network,oom_event,percpu,perf_event,process,resctrl,sched,tcp,udp"]
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
      - /cgroup:/cgroup:ro
    networks:
      - monitoring
    ports:
      - 8080

  diagnose:
    image: debian:bullseye
    container_name: diagnose
    restart: unless-stopped
    command: tail -f /dev/null # Keeps the container running in the foreground
    networks:
      - monitoring
