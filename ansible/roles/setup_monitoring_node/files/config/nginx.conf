##user  nginx;

worker_processes  5;  ## Default: 1
error_log  /dev/stderr;
pid        /tmp/nginx.pid;
worker_rlimit_nofile 8192;

events {
    worker_connections   4096;   ## Default: 1024
}

http {
    default_type application/octet-stream;
    log_format   main '$remote_addr - $remote_user [$time_local]  $status '
        '"$request" $body_bytes_sent "$http_referer" '
        '"$http_user_agent" "$http_x_forwarded_for"';
    access_log   /dev/stderr  main;
    
    sendfile     on;
    tcp_nopush   on;
    resolver 127.0.0.11 ipv6=off;

    # Ensure that X-Scope-OrgID is always present, default to the no_auth_tenant for backwards compatibility when multi-tenancy was turned off.
    #map $http_x_scope_orgid $ensured_x_scope_orgid {
    #    default $http_x_scope_orgid;
    #    "" "anonymous";
    #}


    upstream loki-read {
        server loki-read:3100;
    }

    upstream loki-write {
        server loki-write:3100;
    }

    upstream loki-backend {
        server loki-backend:3100;
    }

    upstream loki-cluster {
        server loki-read:3100;
        server loki-write:3100;
        server loki-backend:3100;
    }

    upstream mimir-read {
        server mimir-read:3200;
    }

    upstream mimir-write {
        server mimir-write:3200;
    }

    upstream mimir-backend {
        server mimir-backend:3200;
    }

    upstream mimir-cluster {
        server mimir-read:3200;
        server mimir-write:3200;
        server mimir-backend:3200;
    }

    server {
        listen 80;
        listen 3100;
        listen 3200;

        location = / {
            return 200 'OK';
            auth_basic off;
        }
        
        # LOKI
        location = /loki/ring {
            #rewrite ^/loki/ring(.*)$ /ring$1 break;
            proxy_pass       http://loki-cluster/ring;
        }

        location = /loki/memberlist {
            proxy_pass       http://loki-cluster/memberlist;
        }

        location = /loki/config {
            proxy_pass       http://loki-cluster/config;
        }

        location = /loki/writer/config {
            proxy_pass       http://loki-write/config;
        }

        location = /loki/reader/config {
            proxy_pass       http://loki-read/config;
        }

        location = /loki/backend/config {
            proxy_pass       http://loki-backend/config;
        }

        location = /loki/metrics {
            proxy_pass       http://loki-cluster/metrics;
        }

        location = /loki/writer/metrics {
            proxy_pass       http://loki-write/config;
        }

        location = /loki/reader/metrics {
            proxy_pass       http://loki-read/config;
        }

        location = /loki/backend/metrics {
            proxy_pass       http://loki-backend/config;
        }

        location = /loki/ready {
            proxy_pass       http://loki-cluster/ready;
        }

        location = /loki/api/v1/push {
            proxy_pass       http://loki-write$request_uri;
        }

        location = /loki/api/v1/tail {
            proxy_pass       http://loki-read$request_uri;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }

        location ~ /loki/api/.* {
            proxy_pass       http://loki-read$request_uri;
        }
    
        # MIMIR

        # TODO Check if the following line is needed
        #proxy_set_header X-Scope-OrgID $ensured_x_scope_orgid;

        location = /mimir/memberlist {
            proxy_pass       http://mimir-cluster/memberlist;
        }
        
        location = /mimir/config {
            proxy_pass       http://mimir-cluster/config;
        }

        location = /mimir/writer/config {
            proxy_pass       http://mimir-write/config;
        }

        location = /mimir/reader/config {
            proxy_pass       http://mimir-read/config;
        }

        location = /mimir/backend/config {
            proxy_pass       http://mimir-backend/config;
        }
        
        location = /mimir/metrics {
            proxy_pass       http://mimir-cluster/metrics;
        }

        location = /mimir/writer/metrics {
            proxy_pass       http://mimir-write/metrics;
        }

        location = /mimir/reader/metrics {
            proxy_pass       http://mimir-read/metrics;
        }

        location = /mimir/backend/metrics {
            proxy_pass       http://loki-backend/metrics;
        }

        location = /mimir/api/v1/push {
            proxy_pass       http://mimir-write/api/v1/push;
        }
        # For later use with OpenTelemetryCollector
        #location = /mimir/otlp/v1/metrics {
        #    proxy_pass       http://mimir-write/otlp/v1/metrics;
        #}
        
        # Rest of /prometheus goes to the query frontend
        location /prometheus {
            proxy_pass      http://mimir-read$request_uri;
        }
        
        location ~ /mimir/api/.* {
            proxy_pass       http://mimir-read$request_uri;
        }
    
    }
}
