TODOS:
- Make script more robust, by using if/else condition and enter/use sub-shells to perform adjustements
- User input: initializing parameters (or use default values)


Run the script:

# This script and uefi.make.sh should be located in the same dir
# In repository this dir could be uefi-creator/ 

# Initialize Parameters

# Choose a uefi firmware release
RPI4_UEFI_URL="https://github.com/pftf/RPi4/releases/download/v1.36/RPi4_UEFI_Firmware_v1.36.zip"
# Specify which deb package to replace that comes  with RPi4 UEFI firmware (depends on version)
RPI4_DEB_PACKAGE="bcm2711-rpi-4-b.dtb"
# Specify deb package version with dtbs as the replacement
UBUNTU_DEB_PACKAGE_URL="http://ports.ubuntu.com/pool/main/l/linux/linux-modules-5.15.0-102-generic_5.15.0-102.112_arm64.deb"
UBUNTU_DEB_PACKAGE_VERSION="5.15.0-102-generic"

# Create a temporary build dir
mkdir build
cd build/

# Get RPi4 UEFI Firmware archive and unzip
curl -L ${RPI4_UEFI_URL} -o uefi.firmware.zip
unzip uefi.firmware.zip
rm uefi.firmware.zip

# Remove the deb package (DTB file) that comes with RPi4 UEFI Firmware
rm ${RPI4_DEB_PACKAGE}

# Get the deb package with the dtbs
curl -L ${UBUNTU_DEB_PACKAGE_URL} -o ubuntu.deb

# Open package and copy dtb file into build dir
mkdir temp/
dpkg -x ubuntu.deb temp/
cp ./temp/lib/firmware/${UBUNTU_DEB_PACKAGE_VERSION}/device-tree/broadcom/${RPI4_DEB_PACKAGE}
rm -r temp/ ubuntu.deb

# Create a new RPi4 UEFI firmware archive and move it out of build dir
zip -r rpi4-impish.zip *
mv rpi4-impish.zip ..

# Clean up 
cd ..
rm -r build/


### Now in /uefi-creator: rpi4-impish.zip  uefi.make.sh

# Check which disks are available
lsblk

# Create the sd card for UEFI boot with zip archive created before
bash uefi.make.sh rpi4-impish.zip
